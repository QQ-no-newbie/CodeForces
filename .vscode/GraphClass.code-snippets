{
	"Graph_lca": {
		"prefix": "LcaCode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m, cnt = 0;",
			"  int depth[maxn], fa[maxn][32], head[maxn];",
			"",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"  struct edge {",
			"    int to, next;",
			"    ll w;",
			"  } e[maxm];",
			"",
			"  void add(int u, int v, ll w) {",
			"    e[++cnt].to = v, e[cnt].w = w, e[cnt].next = head[u], head[u] = cnt;",
			"  }",
			"",
			"  void bfs(int root) {",
			"    queue<ll> q;",
			"    memset(depth, inf, sizeof depth);",
			"    depth[0] = 0, depth[root] = 1;",
			"    q.push(root);",
			"    while (!q.empty()) {",
			"      int u = q.front();",
			"      q.pop();",
			"      for (int i = head[u]; i; i = e[i].next) {",
			"        int v = e[i].to;",
			"        if (depth[v] > depth[u] + 1) {",
			"          depth[v] = depth[u] + 1;",
			"          fa[v][0] = u;",
			"          for (int k = 1; k <= 15; k++) fa[v][k] = fa[fa[v][k - 1]][k - 1];",
			"          q.push(v);",
			"        }",
			"      }",
			"    }",
			"    return;",
			"  }",
			"  ",
			"  int lca(int a, int b) {",
			"    if (depth[a] < depth[b]) swap(a, b);",
			"    for(int i = 15; i >= 0; i--) ",
			"      if(depth[fa[a][i]] >= depth[b])",
			"        a = fa[a][i];",
			"    if(a == b) return a;",
			"    for(int i = 15; i >= 0; i--) ",
			"      if(fa[a][i] != fa[b][i])",
			"        a = fa[a][i], b = fa[b][i];",
			"    return fa[a][0];",
			"  }",
			"};",
		],
	},
	"Graph_SPFACode": {
		"prefix": "SPFACode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m, cnt = 0;",
			"  struct edge {",
			"    int to, next;",
			"    ll w;",
			"  } e[maxm];",
			"  int bj[maxn], head[maxn];",
			"  ll dis[maxn];",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"  void add(int u, int v, ll w) {",
			"    e[++cnt].to = v, e[cnt].w = w, e[cnt].next = head[u], head[u] = cnt;",
			"  }",
			"",
			"  void SPFA(int st) {",
			"    for (int i = 1; i <= n; i++) {",
			"      bj[i] = 0, dis[i] = inf;",
			"    }",
			"    queue<int> q;",
			"    dis[st] = 0;",
			"    bj[st] = 1;",
			"    q.push(st);",
			"    while (!q.empty()) {",
			"      int u = q.front();",
			"      q.pop();",
			"      bj[u] = 0;",
			"      for (int i = head[u]; i; i = e[i].next) {",
			"        int v = e[i].to;",
			"        if (dis[v] > dis[u] + e[i].w) {",
			"          dis[v] = dis[u] + e[i].w;",
			"          if (!bj[v]) {",
			"            bj[v] = 1, q.push(v);",
			"          }",
			"        }",
			"      }",
			"    }",
			"  }",
			"};",
		]
	},
	"Graph_dijkstra": {
		"prefix": "DijkstraCode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m, cnt = 0;",
			"  struct node {",
			"    int id;",
			"    ll dis;",
			"    node(int i, ll j) : id(i), dis(j) {}",
			"    friend bool operator<(node a, node b) { return a.dis > b.dis; }",
			"  };",
			"  struct edge {",
			"    int to, next;",
			"    ll w;",
			"  } e[maxm];",
			"  int bj[maxn], head[maxn];",
			"  ll dis[maxn];",
			"  //ll maps[maxn][maxn]",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"  void add(int u, int v, ll w) {",
			"    e[++cnt].to = v, e[cnt].w = w, e[cnt].next = head[u], head[u] = cnt;",
			"  }",
			"",
			"  void dijkstra_heap(int st) {",
			"    memset(dis, inf, sizeof dis);",
			"    memset(bj, 0, sizeof bj);",
			"    priority_queue<node> q;",
			"    dis[st] = 0;",
			"    q.push({st, 0});",
			"    while (!q.empty()) {",
			"      int u = q.top().id;",
			"      q.pop();",
			"      if (bj[u]) continue;",
			"      for (int i = head[u]; i; i = e[i].next) {",
			"        int v = e[i].to;",
			"        if (dis[v] > dis[u] + e[i].w) {",
			"          dis[v] = dis[u] + e[i].w;",
			"          q.push({v, dis[v]});",
			"        }",
			"      }",
			"    }",
			"  }",
			"};",
		],
	},
	"Graph_floyed": {
		"prefix": "FloyedCode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m, cnt = 0;",
			"  ll maps[maxn][maxn];",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"void floyd() {",
			"    for (int k = 1; k <= n; k++)",
			"        for (int i = 1; i <= n; i++)",
			"            for (int j = 1; j <= n; j++)",
			"                maps[i][j] = min(maps[i][j], maps[i][k] + maps[k][j]);",
			"}",
			"",
			"};",
		],
	},
	"Graph_prim": {
		"prefix": "PrimCode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m, cnt = 0;",
			"  bool bj[maxn];",
			"  ll maps[maxn][maxn], dis[maxn]",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"  ll prim(int st) {",
			"    memset(dis, inf, sizeof dis);",
			"    memset(bj, 0, sizeof bj);",
			"    ll ans = 0;",
			"    dis[st] = 0;",
			"    for (int i = 1; i <= n; i++) {",
			"      ll mini = inf, id;",
			"      for (int j = 1; j <= n; j++)",
			"        if (mini > dis[j] && !bj[j]) mini = dis[id = j];",
			"      bj[id] = 1, ans += mini;",
			"      for (int j = 1; j <= n; j++)",
			"        if (dis[j] > maps[id][j] && !bj[j]) dis[j] = maps[id][j];",
			"    }",
			"    return ans;",
			"  }",
			"",
			"};",
		],
	},
	"Graph_kruskal": {
		"prefix": "KruskalCode",
		"body": [
			"class Graph {",
			" public:",
			"  int n, m;",
			"  Graph(int a, int b) { n = a, m = b; }",
			"  Graph(int a) { n = a; }",
			"",
			"  class Dsu {",
			"   public:",
			"    int fa[maxn] = {0};   // 该点的父节点",
			"    int num[maxn] = {0};  // 该点集合中有多少元素",
			"    int find(int x) {",
			"      if (!fa[x]) return x;",
			"      return fa[x] = find(fa[x]);",
			"    }",
			"    bool Dunion(int p, int q) {",
			"      int v = find(p), u = find(q);",
			"      if (v == u) return 0;",
			"      fa[u] = v;",
			"      return 1;",
			"    }",
			"  } dsu;",
			"",
			"  struct edge {",
			"    int u, v;",
			"    ll w;",
			"    friend bool operator<(edge a, edge b) { return a.w < b.w; }",
			"  } e[maxm];",
			"",
			"  ll kruskal() {",
			"    Dsu dsu;",
			"    sort(e + 1, e + 1 + m);",
			"    ll cnt = 0, ans = 0;",
			"    for (int i = 1; i <= m; i++) {",
			"      int u = e[i].u, v = e[i].v, w = e[i].w;",
			"      if (dsu.Dunion(u, v)) ans += w, cnt++;",
			"      if (cnt == n - 1) break;",
			"    }",
			"    return ans;",
			"  }",
			"",
			"};",
		],
	},
	"Graph_SCC": {
		"prefix": "SccCode",
		"body": [
			"class SCC {",
			"\/\/ 求完scc的连通块， 按照倒序为拓扑序",
			" public:",
			"  stack<ll> stk;",
			"  int timestamp = 0;",
			"  int cnt = 0, scc_cnt = 0;",
			"  int head[maxn] = {0}, dfn[maxn] = {0}, low[maxn] = {0};",
			"  int in_stk[maxn] = {0}, Size[maxn] = {0}, id[maxn] = {0};",
			"  struct edge {",
			"    int to, next;",
			"    ll w;",
			"  } e[maxm];",
			"  void add(int u, int v, int w) {",
			"    e[++cnt].to = v, e[cnt].w = w, e[cnt].next = head[u], head[u] = cnt;",
			"  }",
			"  //将有向图缩成一个DAG",
			"  void tarjan(int u) {",
			"    dfn[u] = low[u] = ++timestamp;",
			"    stk.push(u), in_stk[u] = 1;",
			"    for (int i = head[u]; i; i = e[i].next) {",
			"      int v = e[i].to;",
			"      if (!dfn[v]) {",
			"        tarjan(v);",
			"        low[u] = min(low[u], low[v]);",
			"      } else if (in_stk[v])",
			"        low[u] = min(low[u], dfn[v]);",
			"    }",
			"    if (dfn[u] == low[u]) {",
			"      ++scc_cnt;",
			"      int v;",
			"      do {",
			"        v = stk.top();",
			"        stk.pop();",
			"        in_stk[v] = 0;",
			"        id[v] = scc_cnt;",
			"        Size[scc_cnt]++;",
			"      } while (v != u);",
			"    }",
			"    return;",
			"  }",
			"  //启动缩点",
			"  void start() {",
			"    for (int i = 1; i <= n; i++)",
			"      if (!dfn[i]) tarjan(i);",
			"    return;",
			"  }",
			"};",
		],
	},
	"Graph_DCC": {
		"prefix": "DCC_code",
		"body": [
			"class Graph_DCC {",
			" public:",
			"  struct edge {",
			"    int to, next;",
			"    ll w;",
			"  } e[maxm * 2];",
			"  int cnt = 0, timestamp = 0, dcc_cnt = 0;",
			"  int in_stk[maxn] = {0}, id[maxn] = {0}, is_brigde[maxm * 2] = {0};",
			"  int head[maxn] = {0}, dfn[maxn] = {0}, low[maxn] = {0};",
			"  stack<ll> stk;",
			"",
			"  void add(int u, int v, int w) {",
			"    e[cnt].to = v, e[cnt].w = w, e[cnt].next = head[u], head[u] = cnt++;",
			"  }",
			"",
			"  void tarjan(int u, int faedge) {",
			"    dfn[u] = low[u] = ++timestamp;",
			"    stk.push(u);",
			"",
			"    for (int i = head[u]; ~i; i = e[i].next) {",
			"      int v = e[i].to;",
			"      if (!dfn[v]) {",
			"        tarjan(v, i);",
			"        low[u] = min(low[u], low[v]);",
			"        if (dfn[u] < low[v]) is_brigde[i] = is_brigde[i ^ 1] = 1;",
			"      } else if (i != (faedge ^ 1))",
			"        low[u] = min(low[u], dfn[v]);",
			"    }",
			"",
			"    if (dfn[u] == low[u]) {",
			"      ++dcc_cnt;",
			"      int v;",
			"      do {",
			"        v = stk.top();",
			"        stk.pop();",
			"        id[v] = dcc_cnt;",
			"      } while (v != u);",
			"    }",
			"  }",
			"} dcc;",
		]
	}
}